# Locals
bricker_warning = '–Ω–∏ –∫–∞—á–∞–π —ç—Ç–∞ –≤–∏—Ä—É—Å!!!!1!!!11!1'
ban_warning = '–ü–æ–¥ —á–µ–º —Ç—ã –±—ã–ª, –ø–æ–∫–∞ –ø–∏—Å–∞–ª —ç—Ç–æ? –£–¥–∞–ª—è–π –ø—Ä–∏ –º–Ω–µ.'
# photos = [<telegram media id>]

@dp.message_handler(commands='wtf')
async def wtf_report(message: types.Message):
    if message.chat.id != message.from_user.id:
        await message.reply_to_message.reply(ban_warning)

@dp.message_handler(content_types='file')
async def bricker_warn(message: types.Message):
    await message.reply(bricker_warning)

@dp.message_handler(commands='dice') # –ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")
    
@dp.message_handler(commands='casino') # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
async def cmd_cas(message: types.Message):
    await message.answer_dice(emoji="üé∞")
    
@dp.message_handler(commands='reward') # –†–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ, "–≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã"
async def rewards(message: types.Message): 
    await message.reply_photo(random.choice(photos))

@dp.message_handler(commands="fun")
async def cmd_fun(message: types.Message):
	your_id = message.from_id
	your_name = message.from_user.username
	args = message.text.split(' ', maxsplit=2)
	com = args[1]
	if com == '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å':
		act = '–ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)'
	if com == '–æ–±–æ—Å—Ä–∞—Ç—å':
		act = '–æ–±–æ—Å—Ä–∞–ª(–∞)'
	if com == '—É–¥–∞—Ä–∏—Ç—å':
		act = '—É–¥–∞—Ä–∏–ª(–∞)'
	if com == '–æ–±–æ—Å—Å–∞—Ç—å':
		act = '–æ–±–æ—Å—Å–∞–ª(–∞)'
	if com == '–æ–±–Ω—è—Ç—å':
		act = '–æ–±–Ω—è–ª(–∞)'
	if com == '—Å—å–µ—Å—Ç—å' or com == '—Å—ä–µ—Å—Ç—å':
		act = '—Å—ä–µ–ª(–∞)'
	if com == '–∑–∞–±–∞–Ω–∏—Ç—å' or com == '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' or com == '–±–∞–Ω':
		act = '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª(–∞)'	
	try:
		friend_name = message.reply_to_message.from_user.username
		friend_id = message.reply_to_message.from_user.id
		await message.answer(f'[@{your_name}](tg://user?id={str(your_id)}) {act} [@{friend_name}](tg://user?id={str(friend_id)}).', parse_mode="Markdown")
	except:
		await message.answer(f'[@{your_name}](tg://user?id={str(your_id)}) –≤—Å–µ—Ö {act}.', parse_mode="Markdown")

@dp.message_handler(commands=["zablokirovat","blok"])
async def send_handshake(message: types.Message):
    your_id = message.from_id
    your_name = message.from_user.username
    try:
        friend_name = message.reply_to_message.from_user.username
        friend_id = message.reply_to_message.from_user.id
        await message.answer(f'[@{your_name}](tg://user?id={str(your_id)}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [@{friend_name}](tg://user?id={str(friend_id)}).', parse_mode="Markdown")
    except:
        await message.answer(f'[@{your_name}](tg://user?id={str(your_id)}) –≤—Å–µ—Ö –∑–∞–±–∞–Ω–∏–ª.', parse_mode="Markdown")
